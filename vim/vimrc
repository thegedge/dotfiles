"---------------------------------------------------------------------
" Gedge's .vimrc
"---------------------------------------------------------------------
set nocompatible   " use vim defaults, not vi defaults
if !exists("vimpager")
  let mapleader=" "  " space bar for leader
endif

function! DotfilesSource(name)
  let pluginrc = expand($DOTFILES_DIR) . "/vim/" . a:name
  exec "source " . pluginrc
endfunction

call DotfilesSource("plugins.vimrc")

"---------------------------------------------------------------------
" Syntax coloring
"---------------------------------------------------------------------

if &t_Co >= 256 || has("gui_running")
  let g:gruvbox_italic = 0
  let g:gruvbox_contrast_dark = "hard"
  let g:gruvbox_contrast_light = "medium"
  let g:gruvbox_invert_tabline = 1
  colorscheme gruvbox
elseif &t_Co > 1
  colorscheme desert
endif

if &t_Co > 1
  syntax enable
endif

" Enable filetype-specific indenting and plugins
filetype plugin indent on

"---------------------------------------------------------------------
" Basic configuration
"---------------------------------------------------------------------
set nowrap           " no line wrapping
set ruler            " ruler
set number           " line numbering
set showmatch        " show matching brackets
set mouse=           " disable mouse
set pastetoggle=<F2> " F2 for paste mode
set hidden           " buffers are hidden instead of closed
set showtabline=2    " always show tab bar at top
set laststatus=2     " always show status line
set history=1000     " remember more commands
set autowrite        " write on make/shell commands
set undolevels=1000  " max number of changes to remember
set visualbell       " no beeps
set noerrorbells     " no beeps
set confirm          " confirm changes before closing buffers
set splitright       " vertical splits on the right
set autoindent       " automatic indentation
set background=dark

" Autocompletion when typing commands shows options above instead of inline
set wildmenu
set wildmode=full

" Files to ignore when expanding wildcards
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,.DS_Store
if filereadable(expand("~/.gitignore_global"))
  for line in readfile(expand("~/.gitignore_global"))
    if line =~ '^#' | con | endif
    if line == ''   | con | endif
    if line =~ '^!' | con | endif
    exec "set wildignore+=" . substitute(line, '\v([ ()])', '\\\1', "g")
  endfor
endif

" Whitespace behaviour
set noexpandtab      " I like <Tab>s more than spaces
set tabstop=4        " number of spaces a <Tab> character equals
set softtabstop=4    " number of spaces a <Tab> character equals (insert mode)
set shiftwidth=4     " number of spaces to use for indenting
set smartindent      " smart autoindent on new lines
set smarttab         " smart <Tab> behaviour at start of line
set copyindent       " copy indent structure when making new lines
set backspace=indent,eol,start

" Non-printable characters
set nolist           " don't show non-printable characters
let &listchars="eol:\u00B7,tab:\u25B9\ "

" Fill characters
let &fillchars="vert:\u2577,fold:\u254C"

" Dictionary for CTRL+P and CTRL+N auto-completion
set dictionary=~/.ispell_english,/usr/share/dict/words
set complete=.,w,k
set keywordprg=dict

" So find looks in the current directory tree
set path+=./**

" Backups, swaps, and temps
set nobackup
set noswapfile
set directory=~/.vim/tmp,/var/tmp,/tmp

" Remember more stuff
set viminfo='10,\"100,:20,%,n~/.vim/.viminfo

" Set title in terminal window
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term =~? "^xterm"
  set title
endif

" Status line
call DotfilesSource("statusline.vimrc")

"---------------------------------------------------------------------
" Search
"--------------------------------------------------------------------
set incsearch      " show matches as typing
set ignorecase     " ignore case when searching
set smartcase      " ignore case only if search pattern completely lowercase
set hlsearch       " highlight search terms
set magic          " how backslashes are interpreted in searches

" Remove highlight from searches (normal mode)
nmap <silent> <Leader>/ :nohlsearch<CR>

" n/N will move to the next/previous result and center line on screen
nnoremap n nzz
nnoremap N Nzz

"---------------------------------------------------------------------
" Folds
"---------------------------------------------------------------------
set foldmethod=indent     " folding on indentation
set foldlevel=100         " 'disable' folding at first

" Space increases fold level, if possible, otherwise behaves as normal
nnoremap <silent> <Leader><Space> @=(foldlevel('.') ? 'za' : "\<Space>")<CR>
nnoremap + zr    " + reduces fold level across buffer
nnoremap - zm    " - increases fold level across buffer

" Restore cursor, folds, etc
"autocmd BufWinLeave * if expand("%") != "" | mkview | endif
"autocmd BufWinEnter * if expand("%") != "" | loadview | endif

"---------------------------------------------------------------------
" Filetype specifics
"---------------------------------------------------------------------
if has("autocmd")
  " TODO specify :set options by using a dictionary mapping here
  let s:sources = [
  \   'c', 'cpp', 'css', 'go', 'html', 'java', 'javascript', 'python',
  \   'ruby', 'rust', 'terraform', 'vim'
  \ ]

  function! SourceFileAutoCommands()
    if index(s:sources, &ft) != -1
      " Highlight extra whitespace at the end of a line
      hi ExtraWhitespace ctermbg=red guibg=red
      match ExtraWhitespace /\s\+$/

      " Color column at 80 characters for soft limit, 100+ for hard limit
      let columns = '80,100,'.join(range(120, 500), ',')
      execute 'set colorcolumn=' . columns

      " Improve source code indenting
      "   (0 - with unclosed parentheses, line up in front of open paren
      set cindent
      set cino='(0'
    endif
  endfunction

  augroup all_source
    autocmd!
    au BufNewFile,BufRead * call SourceFileAutoCommands()
  augroup END
endif

"---------------------------------------------------------------------
" Windows and tabs
"---------------------------------------------------------------------
set winminwidth=0   " Windows can have zero width
set winminheight=0  " Windows can have zero height

" Leader-based window commands
nmap <Leader><Left>  :wincmd h<CR>
nmap <Leader><Down>  :wincmd j<CR>
nmap <Leader><Up>    :wincmd k<CR>
nmap <Leader><Right> :wincmd l<CR>
nmap <Leader>_       :wincmd _<CR>
nmap <Leader>\|      :wincmd \|<CR>
nmap <Leader>=       :wincmd =<CR>

" Tab commands with leader keys
nmap <Leader>+       :tabnew<CR>
nmap <Leader>-       :tabc<CR>
nmap <Leader>>       :tabn<CR>
nmap <Leader><       :tabp<CR>

"---------------------------------------------------------------------
" Miscellanouse key mappings and such
"---------------------------------------------------------------------

" Execute :Ag searches for things under the cursor
nnoremap gA :Ag '<C-R><C-W>'<CR>
vnoremap gA y:Ag '<C-R>"'<CR>

" typing a semi-colon starts command (normal mode)
nnoremap ; :

" Q reflows paragraph (normal and visual mode)
nnoremap Q gqap
vnoremap Q gq

" Tab toggles hidden characters (normal mode)
nnoremap <Tab> :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" Reloads a file
nnoremap <C-E> :edit<CR>

" Remapping for next/previous file (normal mode)
nnoremap <C-N> :next<CR>
nnoremap <C-P> :prev<CR>

" Simpify working with my vimrc
nnoremap <Leader>ev :edit $MYVIMRC<CR>
nnoremap <Leader>sv :source $MYVIMRC<CR>

"---------------------------------------------------------------------
" Other plugin config
"---------------------------------------------------------------------

" Sueprtab configuration
let g:SuperTabDefaultCompletionType = "context"

" netrw preview in vertical splits, equal size, wide list style
let g:netrw_preview = 1
let g:netrw_winsize = 0
let g:netrw_liststyle = 3

" Session.vim configuration
let g:session_autoload='yes'
let g:session_autosave='yes'
let g:session_default_to_last=1

" Syntastic defaults to passive mode
let g:syntastic_mode_map = {'mode': 'passive'}

" Indent guides
let g:indentLine_char = 'â”†'
let g:indentLine_first_char = 'â”†'
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_fileTypeExclude = ['help', 'man']

" YouCompleteMe configuration
let g:ycm_auto_trigger = 1
let g:ycm_complete_in_comments = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']

" CtrlP configuration
let g:ctrlp_show_hidden = 0
let g:ctrlp_max_depth = 10
let g:ctrlp_max_files = 10000
let g:ctrlp_match_window = 'max:25'
let g:ctrlp_match_func = {'match': 'cpsm#CtrlPMatch'}
let g:ctrlp_lazy_update = 100
let g:ctrlp_custom_ignore = {
  \   'dir':  '\v[\/](\.(git|hg|svn))|Godeps|target|_site|tmp|vendor$',
  \ }

if has("unix")
  let g:ctrlp_user_command = {
    \   'types': {
    \     1: ['.git/', 'git -C %s ls-files'],
    \     2: ['.hg/', 'hg --cwd %s manifest'],
    \   },
    \   'fallback': 'find %s -type f -maxdepth ' . g:ctrlp_max_depth .
    \               ' | head -' . g:ctrlp_max_files,
    \   'ignore': 1,
    \ }
endif

" Don't have a passthrough for vimpager
let vimpager_passthrough = 0
