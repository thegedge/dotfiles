"---------------------------------------------------------------------
" Gedge's .vimrc
"---------------------------------------------------------------------
set nocompatible   " use vim defaults, not vi defaults
if !exists("vimpager")
  let mapleader=" "  " space bar for leader
endif

"---------------------------------------------------------------------
" Plugins
"---------------------------------------------------------------------
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

" Snippets
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'tomtom/tlib_vim'

" Coloring
Plugin 'flazz/vim-colorschemes'
Plugin 'nathanaelkane/vim-indent-guides'

" Plugins for syntax and completion
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'ebfe/vim-racer'
Plugin 'fatih/vim-go'
Plugin 'peterhoeg/vim-qml'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-markdown'
Plugin 'vim-scripts/gcov.vim'
Plugin 'vim-scripts/swig-syntax'
Plugin 'wting/rust.vim'

" Code/markup commenting shortcuts
Plugin 'scrooloose/nerdcommenter'
" Magical tabbing
Plugin 'ervandew/supertab'
" Table-based manipulations
Plugin 'godlygeek/tabular'
" Text object for function arguments (a, and i,)
Plugin 'PeterRincker/vim-argumentative'
" Additional character info (e.g., html entity, unicode name)
Plugin 'tpope/vim-characterize'
" Git support
Plugin 'tpope/vim-fugitive'
" Repeat plugin commands with .
Plugin 'tpope/vim-repeat'
" Manipulate surroundings
Plugin 'tpope/vim-surround'
" Fuzzy path matching
Plugin 'kien/ctrlp.vim'

call vundle#end()

"---------------------------------------------------------------------
" Syntax coloring
"---------------------------------------------------------------------

if &t_Co >= 256 || has("gui_running")
  colorscheme molokai
  set background=dark
elseif &t_Co > 1
  colorscheme desert
  set background=dark
endif

if &t_Co > 1
  syntax enable
endif

" Enable filetype-specific indenting and plugins
filetype plugin indent on

"---------------------------------------------------------------------
" Basic configuration
"---------------------------------------------------------------------
set nowrap           " no line wrapping
set ruler            " ruler
set number           " line numbering
set showmatch        " show matching brackets
set mouse=           " disable mouse
set pastetoggle=<F2> " F2 for paste mode
set hidden           " buffers are hidden instead of closed
set showtabline=2    " always show tab bar at top
set laststatus=2     " always show status line
set history=1000     " remember more commands
set autowrite        " write on make/shell commands
set undolevels=1000  " max number of changes to remember
set visualbell       " no beeps
set noerrorbells     " no beeps
set confirm          " confirm changes before closing buffers
set splitright       " vertical splits on the right
set autoindent       " automatic indentation

" Autocompletion when typing commands shows options above instead of inline
set wildmenu
set wildmode=full

" Files to ignore when expanding wildcards
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o

" Whitespace behaviour
set noexpandtab      " I like <Tab>s more than spaces
set tabstop=4        " number of spaces a <Tab> character equals
set softtabstop=4    " number of spaces a <Tab> character equals (insert mode)
set shiftwidth=4     " number of spaces to use for indenting
set smartindent      " smart autoindent on new lines
set smarttab         " smart <Tab> behaviour at start of line
set copyindent       " copy indent structure when making new lines
set backspace=indent,eol,start

" Non-printable characters
set nolist           " don't show non-printable characters
let &listchars="eol:\u00B7,tab:\u25B9\ "

" Fill characters
let &fillchars="vert:\u2577,fold:\u254C"

" Dictionary for CTRL+P and CTRL+N auto-completion
set dictionary=~/.ispell_english,/usr/share/dict/words
set complete=.,w,k
set keywordprg=dict

" So find looks in the current directory tree
set path+=./**

" Backups, swaps, and temps
set nobackup
set directory=~/.vim/tmp,/var/tmp,/tmp

" Remember cursor position for files
set viminfo='10,\"100,:20,%,n~/.vim/.viminfo

" Set title in terminal window
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term =~? "^xterm"
  set title
endif

set omnifunc=syntaxcomplete#Complete

"---------------------------------------------------------------------
" Status Line
"--------------------------------------------------------------------
function! FugitiveLine()
  let out = ''
  let has_fugitive = (exists('g:loaded_fugitive') && g:loaded_fugitive == 1)
  if l:has_fugitive
    let out = " \u2442 " . fugitive#head() . ' '
  endif
  return out
endfunction

function! CharDescription()
  let c = matchstr(getline('.')[col('.') - 1:-1], '.')
  let nr = (c ==# "\n" ? 0 : char2nr(c))

  let has_characterize = (exists('g:loaded_characterize') && g:loaded_characterize == 1)
  if l:has_characterize
    let out = '<' . characterize#description(nr, 'unknown')
    let entity = characterize#html_entity(nr)
    if !empty(entity)
      let out .= ', ' . entity
    endif
    let out .= '> ' . printf('U+%04X', nr)
  else
    let out = printf('U+%04X', nr)
  endif

  return out
endfunction

let &statusline=""
"let &statusline.="%2*\ \ %t\ \ "                             " tail of the filename
let &statusline.="%1*\ \ %{strlen(&fenc)?&fenc:'none'}"      " file encoding
let &statusline.="\ \u00B7\ %{&ff}"                          " file format
let &statusline.="\ \u00B7\ %{strlen(&ft)?&ft:'<unknown>'}"  " file type
let &statusline.="%h"                                        " help file flag
let &statusline.="%m"                                        " modified flag
let &statusline.="%r"                                        " read only flag
let &statusline.="\ \ "
let &statusline.="%0*%{FugitiveLine()}"                      " git branch
let &statusline.="%="                                        " left/right separator
let &statusline.="%{CharDescription()}\ "                    " char under cursor
let &statusline.="%4*\ l\ %1*%5l/%-5L\ "                     " cursor line/total lines
let &statusline.="%5*\ c\ %2*%3c-%-3v\ "                     " cursor column/virtual column
let &statusline.="%3*\ \ %P\ \ "                             " percent through file

hi User1 term=bold,reverse cterm=bold,reverse ctermfg=235 ctermbg=253
hi User2 term=bold,reverse cterm=bold,reverse ctermfg=234 ctermbg=253
hi User3 term=bold,reverse cterm=bold,reverse ctermfg=233 ctermbg=253
hi User4 term=bold,reverse cterm=bold,reverse ctermfg=235 ctermbg=241
hi User5 term=bold,reverse cterm=bold,reverse ctermfg=234 ctermbg=241

"---------------------------------------------------------------------
" Search
"--------------------------------------------------------------------
set incsearch      " show matches as typing
set ignorecase     " ignore case when searching
set smartcase      " ignore case only if search pattern completely lowercase
set hlsearch       " highlight search terms
set magic          " how backslashes are interpreted in searches

" Remove highlight from searches (normal mode)
nmap <silent> <leader>/ :nohlsearch<CR>

" n/N will move to the next/previous result and center line on screen
nnoremap n nzz
nnoremap N Nzz

"---------------------------------------------------------------------
" Folds
"---------------------------------------------------------------------
set foldmethod=indent     " folding on indentation
set foldlevel=100         " 'disable' folding at first

" Space increases fold level, if possible, otherwise behaves as normal
nnoremap <silent> <Leader><Space> @=(foldlevel('.') ? 'za' : "\<Space>")<CR>
nnoremap + zr    " + reduces fold level across buffer
nnoremap - zm    " - increases fold level across buffer

"---------------------------------------------------------------------
" Filetype specifics
"---------------------------------------------------------------------
if has("autocmd")
  function! RestoreCursor()
    if line("'\"") <= line("$")
      normal! g`"
      return 1
    endif
  endfunction

  augroup restore_cursor
    autocmd!
    au BufReadPost * call RestoreCursor()
  augroup END

  augroup gcov_files
    autocmd!
    au BufNewFile,BufRead *.gcov set ft=gcov
  augroup END

  augroup twospace_source
    autocmd!
    au BufNewFile,BufRead *.css set et ts=2 sts=2 sw=2
    au BufNewFile,BufRead *.go set noet ts=2 sts=2 sw=2
    au BufNewFile,BufRead *.hs set et ts=2 sts=2 sw=2
    au BufNewFile,BufRead *.html set et ts=2 sts=2 sw=2
    au BufNewFile,BufRead *.i set et ts=2 sts=2 sw=2 ft=swig
    au BufNewFile,BufRead *.js set et ts=2 sts=2 sw=2
    au BufNewFile,BufRead *.md set et ts=2 sts=2 sw=2 spell
    au BufNewFile,BufRead *.rake set et ts=2 sts=2 sw=2
    au BufNewFile,BufRead *.rb set et ts=2 sts=2 sw=2
    au BufNewFile,BufRead *.scss set et ts=2 sts=2 sw=2
    au BufNewFile,BufRead *.swg set et ts=2 sts=2 sw=2 ft=swig
    au BufNewFile,BufRead *.swig set et ts=2 sts=2 sw=2 ft=swig
    au BufNewFile,BufRead *.tf set et ts=2 sts=2 sw=2 ft=terraform
    au BufNewFile,BufRead *.tfstate set ft=json
  augroup END

  augroup fourspace_source
    autocmd!
    au BufNewFile,BufRead *.py set et ts=4 sts=4 sw=4
    au BufNewFile,BufRead *.rs set et ts=4 sts=4 sw=4
  augroup END

  augroup cpp_source
    autocmd!
    au BufNewFile,BufRead *.cc set mps+=<:>
    au BufNewFile,BufRead *.cpp set mps+=<:>
    au BufNewFile,BufRead *.hpp set mps+=<:>
  augroup END

  " TODO specify :set options by using a dictionary mapping here
  let s:sources = [
        \     'c', 'cpp', 'css', 'go', 'html', 'java', 'javascript', 'python',
        \     'ruby', 'rust', 'vim'
        \ ]

  function! SourceFileAutoCommands()
    if index(s:sources, &ft) != -1
      " Highlight extra whitespace at the end of a line
      hi ExtraWhitespace ctermbg=red guibg=red
      match ExtraWhitespace /\s\+$/

      " Color column at 80 characters for soft limit, 100+ for hard limit
      let columns = '80,'.join(range(100, 1000), ',')
      execute 'set colorcolumn=' . columns
      hi ColorColumn term=bold, cterm=bold, ctermbg=235

      " Indent guides
      hi IndentGuidesOdd  ctermbg=233
      hi IndentGuidesEven ctermbg=234

      " Improve source code indenting
      "   (0 - with unclosed parentheses, line up in front of open paren
      set cindent
      set cino='(0'
    endif
  endfunction

  augroup all_source
    autocmd!
    au BufNewFile,BufRead * call SourceFileAutoCommands()
  augroup END
endif

"---------------------------------------------------------------------
" Windows and tabs
"---------------------------------------------------------------------
set winminwidth=0   " Windows can have zero width
set winminheight=0  " Windows can have zero height

" Window switching commands with leader+arrow keys
nmap <leader><Left>  :wincmd h<CR>
nmap <leader><Down>  :wincmd j<CR>
nmap <leader><Up>    :wincmd k<CR>
nmap <leader><Right> :wincmd l<CR>

" Maximize window height
nmap <leader>_       :wincmd _<CR>

" Maximize window width
nmap <leader>\|      :wincmd \|<CR>

" Tab commands with leader keys
nmap <leader>+       :tabn<CR>
nmap <leader>-       :tabc<CR>
nmap <leader>>       :tabn<CR>
nmap <leader><       :tabp<CR>

"---------------------------------------------------------------------
" Miscellanouse key mappings and such
"---------------------------------------------------------------------
autocmd FileType java set makeprg=javac\ $*\ %

" typing a semi-colon starts command (normal mode)
nnoremap ; :

" Q reflows paragraph (normal and visual mode)
nnoremap Q gqap
vnoremap Q gq

" Tab toggles hidden characters (normal mode)
nnoremap <Tab> :set list!<CR>

" Reloads a file
nnoremap <C-E> :edit<CR>

" Remapping for next/previous file (normal mode)
nnoremap <C-N> :next<CR>
nnoremap <C-P> :prev<CR>

"---------------------------------------------------------------------
" Other plugin config
"---------------------------------------------------------------------

" Sueprtab configuration
let g:SuperTabDefaultCompletionType = "context"

" netrw preview in vertical splits, equal size, wide list style
let g:netrw_preview = 1
let g:netrw_winsize = 0
let g:netrw_liststyle = 3

" Session.vim configuration
let g:session_autoload='yes'
let g:session_autosave='yes'
let g:session_default_to_last=1

" Syntastic defaults to passive mode
let g:syntastic_mode_map = {'mode': 'passive'}

" Indent guides
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
let g:indent_guides_space_guides = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']

" YouCompleteMe configuration
let g:ycm_auto_trigger = 0
let g:ycm_extra_conf_globlist = ['~/*']

" CtrlP configuration
let g:ctrlp_match_window = 'max:25'
let g:ctrlp_custom_ignore = {
      \   'dir':  '\v[\/](\.(git|hg|svn))|Godeps|target|_site|tmp|vendor$',
      \ }

" Don't have a passthrough for vimpager
let vimpager_passthrough = 0
